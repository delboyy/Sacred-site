---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all blog posts
const blogEntries = await getCollection('blog');

// Sort posts by date (newest first)
const sortedPosts = blogEntries.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Get all unique tags for filtering
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags))].sort();

// For now, show all posts on one page (pagination can be added later)
const posts = sortedPosts;

// Blog index structured data
const blogStructuredData = {
  "@context": "https://schema.org",
  "@type": "Blog",
  "name": "Wellness Blog - Sacred",
  "description": "Discover natural health insights and holistic living tips from Sacred. Expert guidance on wellness, natural remedies, and mindful living.",
  "url": "https://sacred-site.com/blog",
  "publisher": {
    "@type": "Organization",
    "name": "Sacred",
    "logo": {
      "@type": "ImageObject",
      "url": "https://sacred-site.com/assets/images/ankh-logo.png"
    }
  },
  "blogPost": posts.map(post => ({
    "@type": "BlogPosting",
    "headline": post.data.title,
    "url": `https://sacred-site.com/blog/${post.slug}`,
    "datePublished": post.data.date.toISOString(),
    "author": {
      "@type": "Organization",
      "name": "Sacred"
    }
  }))
};
---

<BaseLayout
  title="Wellness Blog - Sacred"
  description="Discover natural health insights and holistic living tips from Sacred. Expert guidance on wellness, natural remedies, and mindful living."
  url="/blog"
  structuredData={blogStructuredData}
>
  <section class="blog-listing">
    <div class="container">
      <h1 class="page__title">Wellness Blog</h1>
      <p class="page__subtitle">Discover natural health insights and holistic living tips</p>

      <!-- Tag Filter -->
      <div class="tag-filter">
        <div class="tag-filter__container">
          <button class="filter-btn active" data-tag="all">All Posts</button>
          {allTags.map(tag => (
            <button class="filter-btn" data-tag={tag}>
              {tag.charAt(0).toUpperCase() + tag.slice(1).replace('-', ' ')}
            </button>
          ))}
        </div>
      </div>

      <!-- Blog Posts Grid -->
      <div class="blog__articles" id="blog-posts">
        {posts.map(post => (
          <article class="article__card" data-tags={post.data.tags.join(',')}>
            <div class="article__image">
              <img
                src={post.data.cover}
                alt={post.data.title}
                loading="lazy"
                class="blog__placeholder"
              />
            </div>
            <div class="article__content">
              <h2>{post.data.title}</h2>
              <p class="article__excerpt">{post.data.description}</p>
              <div class="article__meta">
                <span class="article__date">
                  {new Date(post.data.date).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </span>
                <span class="article__category">{post.data.tags[0]}</span>
                <span class="reading-time">{post.data.readingTime} min read</span>
              </div>
              <div class="article__tags">
                {post.data.tags.map(tag => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
              <a href={`/blog/${post.slug}`} class="btn btn--outline">Read Article</a>
            </div>
          </article>
        ))}
      </div>

      <!-- Pagination - Coming Soon -->
      <!-- TODO: Implement pagination when more posts are added -->
    </div>
  </section>
</BaseLayout>

<style>
  .tag-filter {
    margin: 2rem 0;
    padding: 1.5rem;
    background: var(--surface);
    border-radius: 8px;
    border: 1px solid var(--border);
  }

  .tag-filter__container {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    align-items: center;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border);
    background: var(--background);
    color: var(--text-secondary);
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .filter-btn:hover,
  .filter-btn.active {
    background: var(--primary);
    color: var(--btn-primary-text);
    border-color: var(--primary);
  }

  .blog__articles {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
  }

  .article__card {
    background: var(--surface);
    border: 1px solid var(--border);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .article__card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .article__image {
    height: 200px;
    overflow: hidden;
  }

  .blog__placeholder {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.2s ease;
  }

  .article__card:hover .blog__placeholder {
    transform: scale(1.05);
  }

  .article__content {
    padding: 1.5rem;
  }

  .article__content h2 {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    line-height: 1.3;
  }

  .article__excerpt {
    color: var(--text-secondary);
    margin: 0 0 1rem 0;
    line-height: 1.5;
  }

  .article__meta {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
    flex-wrap: wrap;
  }

  .article__tags {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
    margin: 1rem 0;
  }

  .article__tags .tag {
    background: var(--color-bg-2);
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
  }

  .pagination {
    margin: 3rem 0 2rem 0;
  }

  .pagination__container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
  }

  .pagination__prev,
  .pagination__next {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .pagination__prev:hover,
  .pagination__next:hover {
    color: var(--primary-hover);
  }

  .pagination__prev.disabled,
  .pagination__next.disabled {
    color: var(--text-secondary);
    cursor: not-allowed;
  }

  .pagination__pages {
    display: flex;
    gap: 0.5rem;
  }

  .pagination__page {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 4px;
    text-decoration: none;
    color: var(--text-secondary);
    transition: all 0.2s ease;
  }

  .pagination__page:hover,
  .pagination__page.current {
    background: var(--primary);
    color: var(--btn-primary-text);
  }

  @media (max-width: 768px) {
    .blog__articles {
      grid-template-columns: 1fr;
    }

    .tag-filter__container {
      justify-content: center;
    }

    .pagination__container {
      flex-direction: column;
      gap: 1rem;
    }

    .article__meta {
      flex-direction: column;
      gap: 0.25rem;
    }
  }
</style>

<script>
  // Tag filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const blogPosts = document.querySelectorAll('.article__card');

    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const selectedTag = this.getAttribute('data-tag');

        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');

        // Filter posts
        blogPosts.forEach(post => {
          const postTags = post.getAttribute('data-tags').split(',');
          const shouldShow = selectedTag === 'all' || postTags.includes(selectedTag);

          if (shouldShow) {
            post.style.display = 'block';
          } else {
            post.style.display = 'none';
          }
        });
      });
    });
  });
</script>
